---
---

@article{zhou2024codesign,
author = {Zhou, Cyrus and Richard, Vaughn and Hassman, Zack and  DiBrino, Michael and Li, Yanjing},
title = {Hardware-software Co-design for Serving Mixed Precision Neural Networks on CPUs},
year = {2024},
publisher = {Association for Computing Machinery},
abstract = {Co-designing CPU SIMD architectures, ultra-low precision mixed precision neural networks training algorithms, compiler, and ISA for efficient and accurate model deployment at the edge},
journal = {ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), In Plan to Submit},
keywords = {Hardware-software Co-design, Mixed Precision Neural Networks, Compiler, SIMD Vectorization, CPU Optimization},
preview = {hwswcodesign.png},
selected={true}
}

@article{zhou2024yflows,
author = {Zhou, Cyrus and Hassman, Zack and Xu, Ruize and Shah, Dhirpal and Li, Yanjing},
title = {YFlows: Systematic Dataflow Exploration and Code
Generation for Efficient Neural Network Inference
using SIMD Architectures on CPUs},
year = {2024},
url = {https://arxiv.org/abs/2310.00574v2},
publisher = {Association for Computing Machinery},
abstract = {We address the challenges associated with deploying neural networks on CPUs, with a particular focus on minimizing inference time while maintaining accuracy. Our novel approach is to use the dataflow (i.e., computation order) of a neural network to explore data reuse opportunitie using heuristic-guided analysis and a code generation framework, which enables exploration of various Single Instruction, Multiple Data (SIMD) implementations to achieve optimized neural network execution. Our results demonstrate that the dataflow that keeps outputs in SIMD registers while also maximizing both input and weight reuse consistently yields the best performance for a wide variety of inference workloads, achieving up to 2.7x speedup for 8-bit neural networks, and up to 4.8x speed up for binary neural networks, respectively, over the state-of-the-art SIMD implementations of neural networks today.},
journal = {IEEE/ACM International Symposium on Code Generation and Optimization (CGO) - Under Revision},
keywords = {Code Generation, SIMD Vectorization, CPU Optimization, Dataflow, Neural Network},
preview = {yflows.png},
selected={true}
}

@article{pan2024understanding,
author = {Pan, Haochen and Zhou, Cyrus and Lu, Shan and Musuvathi, Madan and Nath, Suman},
title = {Understanding and Detecting Idempotency
Violations in Serverless Applications},
year = {2023},
publisher = {Association for Computing Machinery},
abstract = {Serverless applications are composed of event-
triggered serverless functions, which may be invoked multiple
times per incoming event, leading to duplicated notifications,
data inconsistency, and workflow interruptions. To prevent these
undesired effects, application developers must ensure the event
processing workflow is idempotent. However, this design require-
ment is often overlooked by developers, who are also in lack
of tools to pinpoint idempotency violations â€“ code regions that
violate the design intent if retried.
This paper first illustrates how serverless frameworks con-
tribute to idempotency violations, then examine the root cause,
symptoms, and remedies of 248 violations found in 128 Azure
and AWS serverless applications. Based on the findings, we built
static checkers to detect common violation patterns and a testing
framework to trigger and observe idempotency violations. Our
research aims to raise awareness of serverless idempotency vio-
lations and demonstrate that most of them can be systematically
detected and prevented},
journal = {Preparing},
keywords = {Cloud Computing, Debugging, Serverless Systems, Idempotency, Distributed Systems},
preview = {serverless.jpeg},
selected={true}
}

@article{10.1145/3569506,
author = {Zhang, Lefan and Zhou, Cyrus and Littman, Michael L. and Ur, Blase and Lu, Shan},
title = {Helping Users Debug Trigger-Action Programs},
year = {2023},
issue_date = {December 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {6},
number = {4},
url = {https://doi.org/10.1145/3569506},
doi = {10.1145/3569506},
abstract = {Trigger-action programming (TAP) empowers a wide array of users to automate Internet of Things (IoT) devices. However, it can be challenging for users to create completely correct trigger-action programs (TAPs) on the first try, necessitating debugging. While TAP has received substantial research attention, TAP debugging has not. In this paper, we present the first empirical study of users' end-to-end TAP debugging process, focusing on obstacles users face in debugging TAPs and how well users ultimately fix incorrect automations. To enable this study, we added TAP capabilities to an existing 3-D smart home simulator. Thirty remote participants spent a total of 84 hours debugging TAPs using this simulator. Without additional support, participants were often unable to fix buggy TAPs due to a series of obstacles we document. However, we also found that two novel tools we developed helped participants overcome many of these obstacles and more successfully debug TAPs. These tools collect either implicit or explicit feedback from users about automations that should or should not have happened in the past, using a SAT-solving-based algorithm we developed to automatically modify the TAPs to account for this feedback.},
journal = {Proc. ACM Interact. Mob. Wearable Ubiquitous Technol.},
month = {jan},
articleno = {196},
numpages = {32},
keywords = {smart environment, end-user debugging, IoT, Internet of Things, Trigger-action programming, symbolic reasoning, end-user programming, IFTTT},
preview = {tapdebug.png},
selected={true}
}


