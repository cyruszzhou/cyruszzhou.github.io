---
---

@article{stoica2024codesign,
author = {Alexandru Stoica, Bogdan and Sethi, Utsav and Su, Yiming and Zhou, Cyrus and Lu, Shan and Mace, Jonathan and Musuvathi, Madan and Nath, Suman},
title = {If At First You Don’t Succeed, Try, Try, Again...? Insights and Tooling for Detecting Retry Logic Bugs in Distributed Systems},
year = {2023},
publisher = {Usenix},
abstract = {Software developers have long made use of retry - the re-execution of a task on failure - to enable resilient and robust applications. Yet, despite its commonality and long history,broken or unsafe retry continues to be a source of severe, sometimes catastrophic problems. To better understand why retry continues to be problematic, we analyze 58 retry-related issues in 9 modern software applications, and identify multiple root cause categories, which affect various modes of retry, including implicit or asynchronous modes such as task re-enqueueing.

Guided by this study we propose a novel suite of static and dynamic techniques to detect various classes of retry problems. In particular, we find that thoughtful repurposing of unit tests can, along with fault injection, expose retry problems in software; and augmented by classical static analysis and LLM-aided code labeling, can detect a broad set of retry issues across multiple retry modes.

We hope that this work will contribute to the continued improvement of retry in software, enabling more resilient applications.},
journal = {In Preparation (Withdrawn from OSDI)},
keywords = {Distributed Systems, Reliability, Debugging},
preview = {retry.jpg},
selected={true}
}

@article{zhou2024codesign,
author = {Zhou, Cyrus and Richard, Vaughn and Savarese, Pedro and Hassman, Zack  and Maire, Michael and  DiBrino, Michael and Li, Yanjing},
title = {SySMOL: A Hardware-software Co-design Framework for Ultra-Low and Fine-Grained Mixed-Precision Neural Networks},
year = {2023},
publisher = {Association for Computing Machinery},
abstract = {Recent advancements in quantization and mixed-precision techniques offer significant promise for improving the run-time and energy efficiency of neural networks. In this work, we further showed that neural networks, wherein individual parameters or activations can take on different precisions ranging between 1 and 4 bits, can achieve accuracies comparable to or exceeding the full-precision counterparts. However, the deployment of such networks poses numerous challenges, stemming from the necessity to manage and control the compute/communication/storage requirements associated with these extremely fine-grained mixed precisions for each piece of data. There is a lack of existing efficient hardware and system-level support tailored to these unique and challenging requirements. Our research introduces the first novel holistic hardware-software co-design approach for these networks, which enables a continuous feedback loop between hardware design, training, and inference to facilitate systematic design exploration. As a proof-of-concept, we illustrate this co-design approach by designing new, configurable CPU SIMD architectures tailored for these networks, tightly integrating the architecture with new system-aware training and inference techniques. We perform systematic design space exploration using this framework to analyze various tradeoffs. The design for mixed-precision networks that achieves optimized tradeoffs corresponds to an architecture that supports 1, 2, and 4-bit fixed-point operations with four configurable precision patterns, when coupled with system-aware training and inference optimization -- networks trained for this design achieve accuracies that closely match full-precision accuracies, while compressing and improving run-time efficiency of the neural networks drastically by 10-20x, compared to full-precision networks. Our pioneer research addresses the challenges posed by deploying ultra-low, fine-grained mixed-precision neural networks with varied precision requirements, and also reveals several key insights to guide the design of future architectures and neural networks in the low-precision regime, marking a significant step towards enabling ultra-efficient and compact neural networks.},
journal = {ACM International Symposium on Computer Architecture (ISCA), Under Review},
keywords = {Hardware-software Co-design, Mixed Precision Neural Networks, Compiler, SIMD Vectorization, CPU Optimization},
preview = {hwswcodesign.png},
url = {https://arxiv.org/abs/2311.14114},
selected={true}
}

@article{zhou2024yflows,
author = {Zhou, Cyrus and Hassman, Zack and Xu, Ruize and Shah, Dhirpal and Li, Yanjing},
title = {SIMD Dataflow Co-optimization for Efficient Neural Networks Inferences on CPUs},
year = {2023},
url = {https://arxiv.org/abs/2310.00574},
publisher = {Association for Computing Machinery},
abstract = {We address the challenges associated with deploying neural networks on CPUs, with a particular focus on minimizing inference time while maintaining accuracy. Our novel approach is to use the dataflow (i.e., computation order) of a neural network to explore data reuse opportunitie using heuristic-guided analysis and a code generation framework, which enables exploration of various Single Instruction, Multiple Data (SIMD) implementations to achieve optimized neural network execution. Our results demonstrate that the dataflow that keeps outputs in SIMD registers while also maximizing both input and weight reuse consistently yields the best performance for a wide variety of inference workloads, achieving up to 2.7x speedup for 8-bit neural networks, and up to 4.8x speed up for binary neural networks, respectively, over the state-of-the-art SIMD implementations of neural networks today.},
journal = {33rd ACM SIGPLAN International Conference on Compiler Construction (CC '24) (To Appear)},
keywords = {Code Generation, SIMD Vectorization, CPU Optimization, Dataflow, Neural Network},
preview = {yflows.png},
selected={true}
}

@article{pan2024understanding,
author = {Pan, Haochen and Zhou, Cyrus and Lu, Shan and Musuvathi, Madan and Nath, Suman},
title = {Understanding and Detecting Idempotency
Violations in Serverless Applications},
year = {2023},
publisher = {Association for Computing Machinery},
abstract = {Serverless applications are composed of event-
triggered serverless functions, which may be invoked multiple
times per incoming event, leading to duplicated notifications,
data inconsistency, and workflow interruptions. To prevent these
undesired effects, application developers must ensure the event
processing workflow is idempotent. However, this design require-
ment is often overlooked by developers, who are also in lack
of tools to pinpoint idempotency violations – code regions that
violate the design intent if retried.
This paper first illustrates how serverless frameworks con-
tribute to idempotency violations, then examine the root cause,
symptoms, and remedies of 248 violations found in 128 Azure
and AWS serverless applications. Based on the findings, we built
static checkers to detect common violation patterns and a testing
framework to trigger and observe idempotency violations. Our
research aims to raise awareness of serverless idempotency vio-
lations and demonstrate that most of them can be systematically
detected and prevented},
journal = {Preparing},
keywords = {Cloud Computing, Debugging, Serverless Systems, Idempotency, Distributed Systems},
preview = {serverless.jpeg},
selected={true}
}

@article{10.1145/3569506,
author = {Zhang, Lefan and Zhou, Cyrus and Littman, Michael L. and Ur, Blase and Lu, Shan},
title = {Helping Users Debug Trigger-Action Programs},
year = {2023},
issue_date = {December 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {6},
number = {4},
url = {https://doi.org/10.1145/3569506},
doi = {10.1145/3569506},
abstract = {Trigger-action programming (TAP) empowers a wide array of users to automate Internet of Things (IoT) devices. However, it can be challenging for users to create completely correct trigger-action programs (TAPs) on the first try, necessitating debugging. While TAP has received substantial research attention, TAP debugging has not. In this paper, we present the first empirical study of users' end-to-end TAP debugging process, focusing on obstacles users face in debugging TAPs and how well users ultimately fix incorrect automations. To enable this study, we added TAP capabilities to an existing 3-D smart home simulator. Thirty remote participants spent a total of 84 hours debugging TAPs using this simulator. Without additional support, participants were often unable to fix buggy TAPs due to a series of obstacles we document. However, we also found that two novel tools we developed helped participants overcome many of these obstacles and more successfully debug TAPs. These tools collect either implicit or explicit feedback from users about automations that should or should not have happened in the past, using a SAT-solving-based algorithm we developed to automatically modify the TAPs to account for this feedback.},
journal = {Proc. ACM Interact. Mob. Wearable Ubiquitous Technol.},
month = {jan},
articleno = {196},
numpages = {32},
keywords = {smart environment, end-user debugging, IoT, Internet of Things, Trigger-action programming, symbolic reasoning, end-user programming, IFTTT},
preview = {tapdebug.png},
selected={true}
}


